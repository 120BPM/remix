#!/usr/bin/env node

const program = require('commander')
const version = require('../package.json').version

program
  .command('version')
  .description('outputs version number')
  .action(() => {
    console.log(version)
    process.exit(0)
  })

program
  .command('help')
  .description('outputs usage information')
  .action(() => {
    program.help()
    process.exit(0)
  })

program
  .option('-f, --file [filename]', 'solidity filename to debug')
  .option('--tx [txHash]', 'transaction hash to debug')
  .option('--node [url]', 'node to connect to')
  .parse(process.argv)

if (!program.tx) {
  console.error('no tx specified. please specify with --tx <txHash>')
  process.exit(1)
}

if (!program.file) {
  console.error('no file specified. please specify with --file <filepath>')
  process.exit(1)
}

var CmdLine = require('../src/cmdline/index.js')

var solc = require('solc')
var fs = require('fs')

// var filename = 'test/sol/simple_storage.sol'
// var shortFilename = 'simple_storage.sol'
var filename = program.file
var shortFilename = program.file

var inputJson = {
  language: 'Solidity',
  sources: {
  },
  settings: {
    optimizer: {
      // enabled: true,
      enabled: false,
      runs: 200
    },
    outputSelection: {
      '*': {
        '': [ 'legacyAST' ],
        '*': [ 'abi', 'metadata', 'devdoc', 'userdoc', 'evm.legacyAssembly', 'evm.bytecode', 'evm.deployedBytecode', 'evm.methodIdentifiers', 'evm.gasEstimates' ]
      }
    }
  }
}

inputJson.sources[shortFilename] = {content: fs.readFileSync(filename).toString()}

console.log('compiling...')

let compilationData = JSON.parse(solc.compileStandardWrapper(JSON.stringify(inputJson)))
var compilation = {}
compilation.data = compilationData
compilation.source = { sources: inputJson.sources }

let url = (program.node || 'http://localhost:8545')

console.log('connecting to... ' + url)

var cmdLine = new CmdLine()
cmdLine.connect('http', url)
cmdLine.loadCompilationResult(compilation)
cmdLine.initDebugger()

var tx = program.tx

cmdLine.startDebug(tx, shortFilename)

cmdLine.events.on('source', () => {
  cmdLine.getSource().forEach(console.dir)
})

const repl = require('repl')

repl.start({
  prompt: '> ',
  eval: async (cmd, context, filename, cb) => {
    let command = cmd.trim()
    if (command === 'next' || command === 'n') {
      cmdLine.stepOverForward(true)
      await cmdLine.displayVarsInCurrentLine()
    }
    if (command === 'previous' || command === 'p' || command === 'prev') {
      cmdLine.stepOverBack(true)
      await cmdLine.displayVarsInCurrentLine()
    }
    if (command === 'step' || command === 's') {
      cmdLine.stepIntoForward(true)
    }
    if (command === 'stepback' || command === 'sb') {
      cmdLine.stepIntoBack(true)
    }
    if (command === 'exit' || command === 'quit' || command === 'q') {
      process.exit(0)
    }
    if (command === 'var local' || command === 'v l' || command === 'vl') {
      cmdLine.displayLocals()
    }
    if (command === 'var contract' || command === 'v c' || command === 'vc') {
      cmdLine.displayContractVariables()
    }
    if (command === 'var global' || command === 'v g' || command === 'vg') {
      await cmdLine.displayGlobals()
    }
    if (command.split(' ')[0] === 'jump') {
      let stepIndex = parseInt(command.split(' ')[1], 10)
      cmdLine.jumpTo(stepIndex)
    }
    cmdLine.showActions()
    cb(null, '')
  }
})

module.exports = cmdLine
